import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useState, useEffect } from "react";
import { Box, Grid, Card, TextField, Button, Typography } from "@mui/material";
import axios from "axios";
import Loader from "../components/Loader";
import VoiceRecoder from "../components/AudioRecorder";
export default function Home() {
  const [file, setFile] = useState("");
  const [transcription, setTranscription] = useState<any>("");
  const [lines, setLines] = useState<any[]>([]);
  const [newQuestion, setNewQuestion] = useState("");
  const [storedValues, setStoredValues] = useState<any>([]);
  const [gramLoader, setGramLoader] = useState(false);
  const [gptLoader, setGptLoader] = useState(false);
  let formatedText = lines.join("^").toString();

  useEffect(() => {
    setLines(transcription.split("."));
  }, [transcription]);
  const transcribe = async (file: any) => {
    setGramLoader(true);
    try {
      const response = await fetch("/api/transcribe", {
        method: "POST",
        body: JSON.stringify({
          url: file,
        }),
      });
      const received = await response.json();
      const data = JSON.parse(received);

      const transcription =
        data.results.channels[0].alternatives[0].paragraphs.transcript;
      setTranscription(transcription);
      setGramLoader(false);
    } catch (error) {
      setGramLoader(false);
      setTranscription("");
      console.error(error);
    }
  };
  const generateResponse = async () => {
    setGptLoader(true);
    let options = {
      model: "gpt-3.5-turbo",
      temperature: 0,
      max_tokens: 1000,
      top_p: 0.1,
      frequency_penalty: 0.0,
      presence_penalty: 0.0,
      // stop: ["^"],
    };

    let completeOptions: any = {
      ...options,

      // prompt: `${newQuestion}
      //  ${formatedText}`,
      messages: [
        {
          role: "user",
          content: `${newQuestion}
        ${formatedText}`,
        },
      ],
    };
    let params = {
      first: newQuestion,
      second: formatedText,
    };
    const response = await axios.post(
      "https://dark-plum-caterpillar-ring.cyclic.app/transcribeGpt",
      {
        body: params,
      }
    );
    if (response.data) {
      setGptLoader(false);

      setStoredValues([
        {
          question: newQuestion,
          answer: response.data.content,
        },
      ]);
      setGptLoader(false);

      setNewQuestion("");
    }
  };

  return (
    <>
      <Head>
        <title>Otto-Biography</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <VoiceRecoder transcribeFuc={transcribe} />
        {/* <form>
          <Box sx={{ p: 10, textAlign: "center" }}>
            <TextField
              id="Please Enter your Audio Url"
              onChange={(e) => setFile(e.target.value)}
              label="Please Enter Voice Note Url"
              type="text"
              color="warning"
              sx={{ width: "400px" }}
              size="small"
              error
              variant="outlined"
            />
            <Button
              variant="contained"
              type="button"
              sx={{ ml: -0.7, background: "#D32D15", height: "40px" }}
              color="warning"
              onClick={transcribe}
              className={styles.button}
            >
              Transcribe
            </Button>
          </Box>
        </form> */}

        <Card sx={{ pb: 3, m: 3, transition: "1s ease all" }}>
          <Box sx={{ display: "flex", justifyContent: "space-between", p: 3 }}>
            <Typography
              variant="h5"
              sx={{ p: 2, fontWeight: "600", textDecoration: "underline" }}
            >
              Transcribe By DeepGram
            </Typography>
          </Box>

          <Box sx={{ p: 3, mb: 3 }}>
            {gramLoader ? (
              <Loader />
            ) : (
              <>
                {lines.length > 1 ? (
                  <>
                    <Box
                      sx={{
                        textAlign: "start",
                        width: "50%",
                        height: "400px",
                        display: "flex",
                        flexDirection: "column",
                        flexWrap: "wrap",
                        gap: 2,
                      }}
                    >
                      {lines.map((line, index) => {
                        if (line.startsWith("Speaker 0:")) {
                          return (
                            <Typography variant="inherit" key={index}>
                              {line}
                            </Typography>
                          );
                        } else {
                          return (
                            <Typography variant="inherit" key={index}>
                              {line}
                            </Typography>
                          );
                        }
                      })}
                    </Box>
                  </>
                ) : (
                  <Typography sx={{ textAlign: "center" }}>
                    Voice note transcribe will be shown here !
                  </Typography>
                )}
              </>
            )}
          </Box>

          <Box
            sx={{
              mt: 2,
              alignItems: "center",
              display: "flex",
              justifyContent: "center",
            }}
          >
            {lines.length > 1 && (
              <>
                <TextField
                  id="Please Enter Voice s Note Url"
                  value={newQuestion}
                  onChange={(e) => setNewQuestion(e.target.value)}
                  label="Apply Tone e.g. Narrate it like Will Smith"
                  type="text"
                  sx={{ width: "400px" }}
                  color="warning"
                  size="small"
                  error
                  variant="outlined"
                />
                <Button
                  variant="contained"
                  type="button"
                  sx={{ ml: -0.3, background: "#D32D15", height: "40px" }}
                  color="warning"
                  onClick={() => generateResponse()}
                  className={styles.button}
                >
                  Generate Transcribe summary
                </Button>
              </>
            )}
          </Box>
          <Box sx={{ p: 3 }}>
            {gptLoader ? (
              <Loader />
            ) : (
              <>
                <Box
                  sx={{
                    textAlign: "start",
                    width: "100%",
                    height: "400px",
                    overflow: "auto",
                    display: "flex",
                    flexDirection: "column",
                    flexWrap: "wrap",
                    gap: 2,
                  }}
                >
                  {storedValues.map((value: any, index: any) => {
                    return (
                      <Typography variant="inherit" key={index}>
                        {value.answer}
                      </Typography>
                    );
                  })}
                </Box>
              </>
            )}
          </Box>
        </Card>
      </main>
    </>
  );
}
